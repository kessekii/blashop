@page "/cart"

@using Microsoft.Extensions.Configuration

@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject IDataAccess _data
@inject IConfiguration _config

@if (!orderPlaced)
{
    <h3>Shopping Cart</h3>
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
        <div>
            @foreach (var item in cartItems)
            {
                <div class="item-container">
                    <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                    <div class="item-name">
                        <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>

                        <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                        <EditForm Model="item">
                            <InputNumber id="quantity" @bind-Value="item.Quantity"
                                         class="form-control" style="width: 70px" />
                        </EditForm>
                    </div>
                    <div class="item-price">₪@(item.Price * item.Quantity)</div>
                </div>
            }
            <div class="item-price">
                Total (@cartItems.Count): ₪@cartItems.Sum(item => item.Price * item.Quantity)
            </div>
            <div style="text-align: center; margin-top: 10px;">
                <EditForm Model="adress" OnSubmit="HandleAdress">
                    <div class="form-group">
                        <label for="adress">Adress</label>
                        <InputText id="adress" @bind-Value="adress" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Submit adress</button>
                </EditForm>

                <button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Place Order</button>
            </div>
        </div>
    }
}
else
{
    <h3>Thank you for your order!</h3>
    <h4>Here's what you'll get:</h4>
    <div>
        @foreach (var item in cartItems)
        {
            <div class="item-container">
                <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
                <div class="item-name">
                    <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>

                </div>
                <div class="item-price">$@(item.Price * item.Quantity)</div>
                <div class="item-discont">$@(item.DiscontCount * item.Quantity)</div>
            </div>
        }
        <div class="item-price">
            Total (@cartItems.Count): ₪@cartItems.Sum(item => item.Price * item.Quantity)

        </div>
        <div class="item-discont">

            EARNED SCORE! (@cartItems.Count): @cartItems.Sum(item => item.DiscontCount * item.Quantity)
        </div>
    </div>
}

@code {

    List<CartItem> cartItems = new List<CartItem>();
    User user = new User();
    bool orderPlaced = false;
    private string adress = "a";

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService.GetCartItems();


    }


    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }
    private async Task HandleAdress()
    {
        await LocalStorage.SetItemAsync<string>("adress", adress);

        foreach(var item in cartItems)
        {
            string sql = "insert into orders (ProductId, Price, Image, Quantity, DiscontCount) values (item.ProductId, item.Price, item.Image, item.Quantity, item.DiscontCount);";

            await _data.SaveData(sql, new {
                ProductId = item.ProductId,
                Price = item.Price,
                Image = item.Image,
                Quantity = item.Quantity,
                DiscontCount = item.DiscontCount
            }, _config.GetConnectionString("default"));
        }


    }
    private async Task PlaceOrder()
    {
        orderPlaced = true;

        await CartService.EmptyCart();
    }
}
